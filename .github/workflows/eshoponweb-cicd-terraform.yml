name: eShopOnWeb Build and Test - Terraform

#Triggers
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '.github/workflows/**'

#Environment variables https://docs.github.com/en/actions/learn-github-actions/environment-variables
env:
  RESOURCE-GROUP: ${{ vars.RESOURCE_GROUP_NAME }}
  LOCATION: ${{ vars.RESOURCES_LOCATION }}
  TERRAFORM-FILES: .azure/terraform
  WEBAPP-NAME: ${{ vars.WEBAPP_NAME }}


jobs:
  #Build, test and publish .net web project in repository
  buildandtest:
    name: Build and test
    runs-on: ubuntu-latest
    steps:

    #checkout the repository
    - uses: actions/checkout@v2

    #prepare runner for desired .net version SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    #Build/Test/Publish the .net project
    - name: Build with dotnet
      run: dotnet build ./eShopOnWeb.sln --configuration Release
    - name: Test with dotnet
      run: dotnet test ./eShopOnWeb.sln --configuration Release
    - name: dotnet publish
      run: dotnet publish ./src/Web/Web.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp

    # upload the published website code artifacts
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: .net-app
        path: ${{env.DOTNET_ROOT}}/myapp
        
    # upload the bicep template as artifacts for next job
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: terraform-files
        path: ${{ env.TERRAFORM-FILES }}
        
  # Use Terraform to deploy infrastructure + Publish webapp 
  provisioning:
    name: Provisioning
    runs-on: ubuntu-latest
    needs: buildandtest
    environment:
      name: 'dev'
    steps:
  
    #Download the bicep templates from previous job
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: terraform-files
        path: terraform-files
           
    # Deploy Azure WebApp using Terraform files
    - name: Terraform
      shell: bash
      working-directory: terraform-files
      env:
        ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      run: |
        # Exit when any command returns a failure status.
        set -e

        # Write backend.tfvars
        echo 'resource_group_name = "${{ vars.TFSTATE_RESOURCE_GROUP_NAME }}"' | tee backend.tfvars
        echo 'storage_account_name = "${{ vars.TFSTATE_STORAGE_ACCOUNT_NAME }}"' | tee -a backend.tfvars
        echo 'container_name = "${{ vars.TFSTATE_CONTAINER_NAME }}"' | tee -a backend.tfvars
        echo 'key = "${{ vars.WEBAPP_NAME }}.tfstate"' | tee -a backend.tfvars

        # Initialize Terraform.
        terraform init -backend-config="backend.tfvars"

        # Generate Terraform plan
        terraform plan -out=${{ vars.WEBAPP_NAME }}.tfplan -var="app_name=${{ vars.WEBAPP_NAME }}" -var="location=${{ vars.RESOURCES_LOCATION }}"

        # Apply the Terraform plan.
        terraform apply -auto-approve ${{ vars.WEBAPP_NAME }}.tfplan

  # Use Terraform to deploy infrastructure + Publish webapp 
  deployment:
    name: App deployment
    runs-on: ubuntu-latest
    needs: 
      - buildandtest
      - provisioning
    environment:
      name: 'dev'
    steps:

    #Download the publish files created in previous job
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: .net-app
        path: .net-app
    
    #Login in your azure subscription using a service principal (credentials stored as GitHub Secret in repo)
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    # Publish website to Azure App Service (WebApp)
    - name: Publish Website to WebApp
      uses: Azure/webapps-deploy@v2
      with:
        app-name: web-${{ env.WEBAPP-NAME  }}
        package: .net-app